# Python Lesson: More on Number, List and String

# == Numbers

a = 11
print(a)

b = 2.5 
print(b + 2.5)
print(a + b)

# Decimal is also called Float. Some programming language also defines Double (Float)
print(1 / 3) # 0.333333... (repeat)

# NOTE: Computer (any programming language) can NOT represent decimal numbers
# with EXACT value! It can only approximate, upt very large decimal places... very 
# close, but not exact.
# See https://floating-point-gui.de/ for more deeper study if you want to.

# Example, python seems to print you a correct result of 0.3 here:
print(0.1 + 0.2)
# But if you ask Python to print 30 digits of decimal places in your answer,
# you will see that it is NOT all zeros!
print("{:.30f}".format(0.1 + 0.2))
# This prints 0.300000000000000044408920985006 -> 0.3000 000 000 000 000 44408920985006
# So the answer is only up with 15 decimal places accuracy. In many cases, it's
# enough for most problem solving.


# == List
mylist = [99, 88, 77, 66, 55, 44]
print(mylist)
print(mylist[1])

# You can also get range of items by SLICING with a colon inside the bracket
sublist = [mylist[2], mylist[3]]
print(sublist)
sublist2 = mylist[2:4]
print(sublist2)

print(mylist[:4])
print(mylist[2:])
print(mylist[-4:-2])
print(mylist[-4:])

# Slice can support step/increment, with another colon
print(mylist[::2])

# A negative step will walk through items in list opposite direction (right to left)
print(mylist[::-2])

# If you do not specify number in slice, it default to all items.
# Below will print all items in list
print(mylist[:])
print(mylist[::])

# We often use slice with -1 step to reverse a list
print(mylist[::-1])

# Example: Here is a long way to reverse a name
# name = "Kenny"
# print(name)
# name_list = list(name)
# print(name_list)
# reversed_name_list = name_list[::-1]
# print(reversed_name_list)
# reversed_name = "#".join(reversed_name_list)
# print(reversed_name)

# Example: Here is a consise way of reverse a name
name = "Zemian"
print("".join(list(name)[::-1]))

# Exercise Problem:
# For each words in the list below, print True if it is a Palindrome word, 
# or False if it's NOT.
word_list = ['civic', 'eat', 'radar', 'level', 'madam', 'fun']

