# 
# Python has few very common data types: int, string, and list
#

# == Working with int
#
# You can work with integer numbers in Python in a very
# natural way.
print(123)

# You can use it as calculator
print(1 + 2)
print(1 + 2 + 3)

# You can use a variable to store the number, then work with later.
# We use variables in code so we can make change to the value without 
# hardcoding it everywhere.
num = 123
print(num)

num = num + 22
print(num)

num = 223
num = num + 22
print(num)

# Note the variable name "num" is randomly chosen, and you can use any name you like.
# For example: mynum, num2 or my_num are all valid name for variables.
# You usually want to name it more meaningful and unique,
# because in a program, you can easily have dozen of variables in the same
# code block. So choose a good name can help you work more efficiently.

# You can perform other basic math operators on numbers
print(1234 - 100)
print(99 * 2)
print(246 / 123)

# Self increment operator shortcuts
num = 0
num = num + 1
# above is same as
num += 1
print(num)
# You can use this pattern for all operators: +, -, * or /
num -= 1
print(num)

# You can perform number expression and it will honor the order of precedence
num = 8 - 2 * 3
print(num)
# To change the order of precedence, use parenthesis
num = (8 - 2) * 3
print(num)

# == Working with list
# 
# a list is a sequence of data holding it together within a brackets pair. 
# The list itself can be assign to a variable.

# For example, here is a list of integer numbers
mylist = [99, 88, 77]
print(mylist)

# You can access each item in the list by indexing. The index starts with ZERO!
item1 = mylist[0]
print(item1)
item2 = mylist[1]
print(item2)
item3 = mylist[2]
print(item3)

# If you go outside of the index boundary, you will get error!
print(mylist[3])


# == Working with string
#
# string can be consider a list of characters.
mystring = ['K', 'e', 'n', 'n', 'y']
print(mystring)

# But Python let you write characters all together within quotes and call it string
mystring = "Kenny"
print(mystring)

# You can use single quote, triple quotes as well. The differences are how they
# will escape special characters inside, which you will learn later.
print('Kenny')
print('''Kenny''')
print("""Kenny""")

# You can join or concatenate one or more strings together.
message = "Kenny is " + "11" + " years old"
print(message)

# Note that Python care about the difference between a int vs 
# string even if they look the same. We call these int and string
# as data types.
int_num = 11
string_num = "11"
print(int_num, string_num, " is not the same!")

# You ask Python for type from a variable using the type() function
print(type(int_num))
print(type(string_num))

# Because different data types matters to Python, you can't 
# concatenate different types together. You can only operate
# data if they are the same types.
# For example, this will give you an error!
message = "Kenny is " + 11 + " years old"

# This is the correct way (note that you need str() function to convert
# int number to a string type first, before it can concatenate together.
message = "Kenny is " + str(11) + " years old"

# Or you can use string format function
message = "Kenny is {} years old".format(11)
print(message)

